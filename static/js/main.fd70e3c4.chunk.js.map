{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pagesCount","Math","ceil","isFirstPage","isLastPage","pages","className","classNames","disabled","href","onClick","map","page","active","handlePageClick","items","App","length","useState","setCurrentPage","setPerPage","firstItemIndex","lastItemIndex","itemsToShow","slice","id","value","onChange","event","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCKIG,EAAa,SAAC,GAKb,IAJZC,EAIW,EAJXA,MACAC,EAGW,EAHXA,QACAC,EAEW,EAFXA,YACAC,EACW,EADXA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAA8B,IAAhBL,EACdM,EAAaN,IAAgBE,EAE7BK,EAAQhB,EAAW,EAAGW,GAoB5B,OACE,qBAAIM,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUL,IAAnD,SACE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QApBgB,WACjBP,GACHJ,EAAaD,EAAc,IAazB,oBAUDO,EAAMM,KAAI,SAAAC,GAAI,OACb,oBACEN,UAAWC,IAAW,YACpB,CAAEM,OAAQD,IAASd,IAFvB,SAKE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAzCK,SAACE,GACnBA,IAASd,GACXC,EAAaa,GAuCQE,CAAgBF,IAJjC,SAMGA,KAREA,MAYT,oBAAIN,UAAWC,IAAW,YAAa,CAAEC,SAAUJ,IAAnD,SACE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAzCgB,WACjBN,GACHL,EAAaD,EAAc,IAkCzB,wBClEFiB,EAAQ1B,EAAW,EAAG,IACzBsB,KAAI,SAAAlB,GAAC,qBAAYA,MAEPuB,EAAgB,WAC3B,IAAMpB,EAAQmB,EAAME,OACpB,EAAsCC,mBAAS,GAA/C,mBAAOpB,EAAP,KAAoBqB,EAApB,KACA,EAA8BD,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBuB,EAAhB,KACMC,GAAkBvB,EAAc,GAAKD,EACrCyB,EAAgBxB,EAAcD,EAAUD,EAC1CA,EACAE,EAAcD,EAEZ0B,EAAcR,EAAMS,MAAMH,EAAgBC,GAOhD,OACE,sBAAKhB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWR,EADX,mBACiCuB,EAAiB,EADlD,cACyDC,EADzD,eAC6E1B,EAD7E,OAIA,sBAAKU,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRmB,GAAG,kBACHnB,UAAU,eACVoB,MAAO7B,EACP8B,SApBY,SAACC,GACrBR,GAAYQ,EAAMC,OAAOH,OACzBP,EAAe,IAaT,UAOE,wBAAQO,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBxB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACEV,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aAAc,SAACa,GAAD,OAAkBO,EAAeP,MAEjD,6BACGW,EAAYZ,KAAI,SAAAoB,GAAI,OACnB,oBAAI,UAAQ,OAAZ,SAAoBA,aC1D9BC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fd70e3c4.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","// import { getNumbers } from '../../utils';\n\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}: Props) => {\n  const pagesCount = Math.ceil(total / perPage);\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === pagesCount;\n\n  const pages = getNumbers(1, pagesCount);\n\n  const handlePageClick = (page: number) => {\n    if (page !== currentPage) {\n      onPageChange(page);\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (!isFirstPage) {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  const handleNextClick = () => {\n    if (!isLastPage) {\n      onPageChange(currentPage + 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', { disabled: isFirstPage })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={handlePrevClick}\n        >\n          «\n        </a>\n      </li>\n      {pages.map(page => (\n        <li\n          className={classNames('page-item',\n            { active: page === currentPage })}\n          key={page}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${page}`}\n            onClick={() => handlePageClick(page)}\n          >\n            {page}\n          </a>\n        </li>\n      ))}\n      <li className={classNames('page-item', { disabled: isLastPage })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={isLastPage}\n          onClick={handleNextClick}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const total = items.length;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const firstItemIndex = (currentPage - 1) * perPage;\n  const lastItemIndex = currentPage * perPage > total\n    ? total\n    : currentPage * perPage;\n\n  const itemsToShow = items.slice(firstItemIndex, lastItemIndex);\n\n  const handlePerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItemIndex + 1} - ${lastItemIndex} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={handlePerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={(page: number) => setCurrentPage(page)}\n      />\n      <ul>\n        {itemsToShow.map(item => (\n          <li data-cy=\"item\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}